generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  username        String    @default("")
  password        String
  emailVerified   Boolean   @default(false)
  verificationCode String?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  cart            Cart?     // Связь с корзиной (один к одному)
  orders          Order[]   // Для отслеживания заказов
}

model Product {
  id          String    @id @default(cuid())
  name        String
  type        String    // 'subscription' или 'key'
  price       Float
  description String
  benefits    String[]  // Массив преимуществ для привилегий
  icon        String?   // Путь к иконке
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  cartItems   CartItem[] // Связь с элементами корзины
}

model Cart {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique // Один пользователь - одна корзина
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model CartItem {
  id         String   @id @default(cuid())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int      @default(1)
  duration   String?  // Для привилегий: '30-d', '90-d', '1-y'
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([cartId, productId]) // Предотвращает дублирование товаров в корзине
}

model Order {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  items      OrderItem[]
  total      Float
  status     String    // 'pending', 'paid', 'delivered', 'cancelled'
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  productId  String   // Сохраняем ID продукта
  productName String  // Сохраняем название на момент заказа
  productType String  // 'subscription' или 'key'
  price      Float    // Сохраняем цену на момент заказа
  quantity   Int
  duration   String?  // Для привилегий
  createdAt  DateTime @default(now())
}